using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Swarms.Models.Agent.Batch;

[JsonConverter(typeof(ModelConverter<BatchRunResponse>))]
public sealed record class BatchRunResponse : ModelBase, IFromRaw<BatchRunResponse>
{
    /// <summary>
    /// The unique identifier for the agent batch completion.
    /// </summary>
    public string? BatchID
    {
        get
        {
            if (!this.Properties.TryGetValue("batch_id", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<string?>(element, ModelBase.SerializerOptions);
        }
        set
        {
            this.Properties["batch_id"] = JsonSerializer.SerializeToElement(
                value,
                ModelBase.SerializerOptions
            );
        }
    }

    /// <summary>
    /// The execution time of the agent batch completion.
    /// </summary>
    public double? ExecutionTime
    {
        get
        {
            if (!this.Properties.TryGetValue("execution_time", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<double?>(element, ModelBase.SerializerOptions);
        }
        set
        {
            this.Properties["execution_time"] = JsonSerializer.SerializeToElement(
                value,
                ModelBase.SerializerOptions
            );
        }
    }

    /// <summary>
    /// The outputs generated by the agent.
    /// </summary>
    public JsonElement? Results
    {
        get
        {
            if (!this.Properties.TryGetValue("results", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<JsonElement?>(element, ModelBase.SerializerOptions);
        }
        set
        {
            this.Properties["results"] = JsonSerializer.SerializeToElement(
                value,
                ModelBase.SerializerOptions
            );
        }
    }

    /// <summary>
    /// The timestamp when the agent batch completion was created.
    /// </summary>
    public string? Timestamp
    {
        get
        {
            if (!this.Properties.TryGetValue("timestamp", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<string?>(element, ModelBase.SerializerOptions);
        }
        set
        {
            this.Properties["timestamp"] = JsonSerializer.SerializeToElement(
                value,
                ModelBase.SerializerOptions
            );
        }
    }

    /// <summary>
    /// The total number of requests in the batch.
    /// </summary>
    public long? TotalRequests
    {
        get
        {
            if (!this.Properties.TryGetValue("total_requests", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<long?>(element, ModelBase.SerializerOptions);
        }
        set
        {
            this.Properties["total_requests"] = JsonSerializer.SerializeToElement(
                value,
                ModelBase.SerializerOptions
            );
        }
    }

    public override void Validate()
    {
        _ = this.BatchID;
        _ = this.ExecutionTime;
        _ = this.Results;
        _ = this.Timestamp;
        _ = this.TotalRequests;
    }

    public BatchRunResponse() { }

#pragma warning disable CS8618
    [SetsRequiredMembers]
    BatchRunResponse(Dictionary<string, JsonElement> properties)
    {
        Properties = properties;
    }
#pragma warning restore CS8618

    public static BatchRunResponse FromRawUnchecked(Dictionary<string, JsonElement> properties)
    {
        return new(properties);
    }
}
