using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Swarms.Models.Agent;

[JsonConverter(typeof(ModelConverter<AgentRunResponse>))]
public sealed record class AgentRunResponse : ModelBase, IFromRaw<AgentRunResponse>
{
    /// <summary>
    /// The unique identifier for the agent completion.
    /// </summary>
    public string? ID
    {
        get
        {
            if (!this.Properties.TryGetValue("id", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<string?>(element, ModelBase.SerializerOptions);
        }
        set { this.Properties["id"] = JsonSerializer.SerializeToElement(value); }
    }

    /// <summary>
    /// A description of the agent or completion.
    /// </summary>
    public string? Description
    {
        get
        {
            if (!this.Properties.TryGetValue("description", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<string?>(element, ModelBase.SerializerOptions);
        }
        set { this.Properties["description"] = JsonSerializer.SerializeToElement(value); }
    }

    /// <summary>
    /// The name of the agent.
    /// </summary>
    public string? Name
    {
        get
        {
            if (!this.Properties.TryGetValue("name", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<string?>(element, ModelBase.SerializerOptions);
        }
        set { this.Properties["name"] = JsonSerializer.SerializeToElement(value); }
    }

    /// <summary>
    /// The outputs generated by the agent.
    /// </summary>
    public JsonElement? Outputs
    {
        get
        {
            if (!this.Properties.TryGetValue("outputs", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<JsonElement?>(element, ModelBase.SerializerOptions);
        }
        set { this.Properties["outputs"] = JsonSerializer.SerializeToElement(value); }
    }

    /// <summary>
    /// Indicates whether the agent completion was successful.
    /// </summary>
    public bool? Success
    {
        get
        {
            if (!this.Properties.TryGetValue("success", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<bool?>(element, ModelBase.SerializerOptions);
        }
        set { this.Properties["success"] = JsonSerializer.SerializeToElement(value); }
    }

    /// <summary>
    /// The temperature setting used for the agent's response generation.
    /// </summary>
    public double? Temperature
    {
        get
        {
            if (!this.Properties.TryGetValue("temperature", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<double?>(element, ModelBase.SerializerOptions);
        }
        set { this.Properties["temperature"] = JsonSerializer.SerializeToElement(value); }
    }

    /// <summary>
    /// The timestamp when the agent completion was created.
    /// </summary>
    public string? Timestamp
    {
        get
        {
            if (!this.Properties.TryGetValue("timestamp", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<string?>(element, ModelBase.SerializerOptions);
        }
        set { this.Properties["timestamp"] = JsonSerializer.SerializeToElement(value); }
    }

    /// <summary>
    /// Usage statistics or metadata for the agent completion.
    /// </summary>
    public Dictionary<string, JsonElement>? Usage
    {
        get
        {
            if (!this.Properties.TryGetValue("usage", out JsonElement element))
                return null;

            return JsonSerializer.Deserialize<Dictionary<string, JsonElement>?>(
                element,
                ModelBase.SerializerOptions
            );
        }
        set { this.Properties["usage"] = JsonSerializer.SerializeToElement(value); }
    }

    public override void Validate()
    {
        _ = this.ID;
        _ = this.Description;
        _ = this.Name;
        _ = this.Outputs;
        _ = this.Success;
        _ = this.Temperature;
        _ = this.Timestamp;
        if (this.Usage != null)
        {
            foreach (var item in this.Usage.Values)
            {
                _ = item;
            }
        }
    }

    public AgentRunResponse() { }

#pragma warning disable CS8618
    [SetsRequiredMembers]
    AgentRunResponse(Dictionary<string, JsonElement> properties)
    {
        Properties = properties;
    }
#pragma warning restore CS8618

    public static AgentRunResponse FromRawUnchecked(Dictionary<string, JsonElement> properties)
    {
        return new(properties);
    }
}
